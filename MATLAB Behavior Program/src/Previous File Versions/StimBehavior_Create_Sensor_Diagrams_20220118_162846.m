function handles = StimBehavior_Create_Sensor_Diagrams(handles)

%
%StimBehavior_Create_Sensor_Diagrams.m - Vulintus, Inc.
%
%   STIMBEHAVIOR_CREATE_SENSOR_DIAGRAMS creates displays to show the 
%   status of interaction sensors on the nosepoke and pellet receivers in
%   the StimBehavior task.
%   
%   UPDATE LOG:
%   11/30/2021 - Drew Sloan - Function first created, adapted from ST_Tactile_2AFC_Create_Sensor_Diagrams
%

cla(handles.sensor_ax);                                                     %Clear the sensor axes.
hold(handles.sensor_ax,'on');                                               %Hold the axes for multiple plots.
c_r = 1.0;                                                                  %Set the carousel diagram radius.
x = c_r*sind(0:3:360);                                                      %Create x-coordinates.
y = c_r*cosd(0:3:360);                                                      %Create y-coordinates.
handles.diagram.carousel.disc = fill(x,y,[0.75 0.75 0.75],...
    'edgecolor','k',...
    'linewidth',2,...
    'parent',handles.sensor_ax);                                            %Create a fill object.
handles.diagram.carousel.pads = zeros(numel(handles.disc.position),1);      %Create a matrix to hold fill object handles.
handles.diagram.carousel.labels = zeros(numel(handles.disc.position),1);    %Create a matrix to hold text object handles.
p_d = 0.16*c_r;                                                             %Set the dimensions of the pad diagram.
p_r = 0.75*c_r;                                                             %Set the radius of the pad diagrams.
xy = p_d*[1 1; 1 -1; -1 -1; -1 1];                                          %Create coordinates for a square.
xy(:,2) = xy(:,2) - p_r;                                                    %Shift the y-coordinates downward.
a = 360/numel(handles.disc.position);                                       %Calcule the step angle.
for i = 1:numel(handles.disc.position)                                      %Step through each disc position.
    theta = -a*(i-1);                                                       %Calculate the angle for this pad.
    R = [cosd(theta) -sind(theta); sind(theta) cosd(theta)];                %Create a rotation matrix.
    r_xy = xy*R';                                                           %Rotate the coordinates.
    handles.diagram.carousel.pads(i) = ...
        fill(r_xy(:,1),r_xy(:,2),[0.9 0.9 0.9],...
        'edgecolor','k',...
        'linewidth',1,...
        'parent',handles.sensor_ax);                                        %Create a fill object for each pad.
    handles.diagram.carousel.pads(i) = ...
        text(p_r*cosd(-90 + theta),p_r*sind(-90 + theta),...        
        handles.disc.position(i).label,...
        'rotation',theta,...
        'fontsize',30*p_d,...
        'fontweight','bold',...
        'fontname','Arial',...
        'verticalalignment','middle',...
        'horizontalalignment','center',...
        'parent',handles.sensor_ax);                                        %Create a text label for the right receiver.
end

pr_r = 0.5*c_r;                                                             %Set the half-height and half-width of the pellet receiver diagram.
xy = [(0.5*pr_r*sind(0:3:90) + 0.5*pr_r)',...
    (0.5*pr_r*cosd(0:3:90) + 0.5*pr_r)'];                                   %Create x- and y-coordinates for a 90-degree arc.
R = [cosd(-90) -sind(-90); sind(-90) cosd(-90)];                            %Create a rotation matrix.
xy = [xy; xy*R'; (xy*R')*R'; ((xy*R')*R')*R'];                              %Rotate the coordinates to create a filleted box.
offset = 1.1*(c_r + pr_r);                                                  %Set the offset.
handles.diagram.pellet_receiver = zeros(1,2);                               %Create a matrix to hold diagram handles for the pellet receivers.
handles.diagram.pellet_receiver(1) = ...
    fill(xy(:,1)-offset,xy(:,2),[0.75 0.75 0.75],...
    'edgecolor','k',...
    'linewidth',2,...
    'parent',handles.sensor_ax);                                            %Create a fill object for the left receiver.
handles.diagram.pellet_receiver(2) = ...
    fill(xy(:,1)+offset,xy(:,2),[0.75 0.75 0.75],...
    'edgecolor','k',...
    'linewidth',2,...
    'parent',handles.sensor_ax);                                            %Create a fill object for the right receiver.
text(-offset,0,'LEFT',...
    'fontsize',20*pr_r,...
    'fontweight','bold',...
    'fontname','Arial',...
    'verticalalignment','middle',...
    'horizontalalignment','center',...
    'parent',handles.sensor_ax);                                            %Create a text label for the left receiver.
text(offset,0,'RIGHT',...
    'fontsize',20*pr_r,...
    'fontweight','bold',...
    'fontname','Arial',...
    'verticalalignment','middle',...
    'horizontalalignment','center',...
    'parent',handles.sensor_ax);                                            %Create a text label for the right receiver.

handles.sensor_ax.XTick = [];                                               %Hide any x-ticks on the axes.
handles.sensor_ax.YTick = [];                                               %Hide any y-ticks on the axes.
handles.sensor_ax.XLim = (offset + 1.1*pr_r)*[-1,1];                        %Set the x-axis limits.
pos = handles.sensor_ax.Position;                                           %Grab the axes position.
handles.sensor_ax.YLim = (pos(4)/pos(3))*(offset + 1.1*pr_r)*[-1,1];        %Set the y-axis limits to get a 1:1 aspect ration.
handles.sensor_ax.Visible = 'off';                                          %Make the axes invisible.

disableDefaultInteractivity(handles.sensor_ax);                             %Disable the axes interactivity.
handles.sensor_ax.Toolbar.Visible = 'off';                                  %Hide the axes toolbar.