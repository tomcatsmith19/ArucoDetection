clear all;
clc;

% Step 1: Select an excel file
[file, path] = uigetfile('*.xlsx', 'Select an Excel file');
if isequal(file,0)
    disp('User canceled the file selection');
    return;
end
excelFile = fullfile(path, file);

% Step 2: Open the excel file and extract data from Sheet2 Column C
data = xlsread(excelFile, 'Sheet2', 'C:C');
AllSessionData(:, 1) = data;

% Step 3: Combine and sort data from Sheet3 Columns A and C
% Load data from Sheet3 for combining and sorting
Sheet3DataA = xlsread(excelFile, 'Sheet3', 'A:A'); % Load data from column A
Sheet3DataC = xlsread(excelFile, 'Sheet3', 'C:C'); % Load data from column C

% Combine data from columns A and C into a single column
CombinedData = sort([Sheet3DataA; Sheet3DataC]);

% Sort the combined data from smallest to largest
trialTimeData = sort(CombinedData);
AllSessionData(:, 2) = trialTimeData(:, 1);

% Calculate the rolling probabilities with a 5-minute window
binSize = 5; % Minutes per bin
maxTime = max(AllSessionData(:, 2));
timePoints = 0:maxTime; % Generate time points for the entire session

% Initialize arrays to store rolling probabilities and colors
RollingProbabilities = zeros(size(timePoints));
ColorAssignment = cell(size(timePoints));

for i = 1:length(timePoints)
    windowStart = timePoints(i);
    windowEnd = windowStart + binSize;
    
    % Filter rows within the current rolling window
    windowRows = AllSessionData(:, 2) >= windowStart & AllSessionData(:, 2) < windowEnd;
    
    % Calculate the probability of 0's within the rolling window
    windowData = AllSessionData(windowRows, 1);
    numZeros = sum(windowData == 0);
    numTwos = sum(windowData == 2);
    
    if (numZeros + numTwos) > 0
        RollingProbabilities(i) = numZeros / (numZeros + numTwos) * 100;
    else
        RollingProbabilities(i) = NaN; % Set to NaN if no data in the window
    end
    
    % Assign "green" or "red" color based on the probability
    if RollingProbabilities(i) >= 50
        ColorAssignment{i} = '#B3E48E'; % Engaged (green)
    else
        ColorAssignment{i} = '#E07F80'; % Distracted (red)
    end
end

% Create a figure
figure;

% Plot rectangles with rolling colors
for i = 1:length(timePoints)-1
    timeStart = timePoints(i);
    timeEnd = timePoints(i+1);
    color = ColorAssignment{i};
    
    % Plot a rectangle with the current color and no border
    rectangle('Position', [timeStart, 0, binSize, 1], 'FaceColor', color, 'EdgeColor', 'none');
end

% Define the threshold for 50%
threshold = 50;

% Find the time point where percentage drops below 50%
timePointBelowThreshold = timePoints(find(RollingProbabilities < threshold, 1, 'first'));

% Add a thick blue vertical line at the time point below 50%
if ~isnan(timePointBelowThreshold)
    hold on; % Allow multiple plot objects in the same figure
    plot([timePointBelowThreshold, timePointBelowThreshold], [0, 1], 'b', 'LineWidth', 2);
    hold off; % Release hold for further plotting
end

% Set x-axis limits and labels
xlim([0, maxTime]);
xlabel('Time (minutes)');

% Remove y-axis labels, tick marks, and values
set(gca, 'YTick', []);
set(gca, 'YTickLabel', []);

% Set the title
title('Transitions Between Engaged and Distracted');

% Display the plot
grid on;

disp(RollingProbabilities);
